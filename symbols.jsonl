{"file":"diff.rs","lang":"rust","kind":"struct","name":"ChunkingBackend","qualified_name":"ChunkingBackend","byte_start":182,"byte_end":262,"start_line":6,"end_line":9,"visibility":"public","doc":"Token-aware chunking backend using HF tokenizers (default) or tiktoken (feature-gated)"}
{"file":"diff.rs","lang":"rust","kind":"method","name":"new_hf","qualified_name":"ChunkingBackend::new_hf","byte_start":352,"byte_end":1040,"start_line":13,"end_line":30,"visibility":"public","doc":"Create backend with HF tokenizer for specified model"}
{"file":"diff.rs","lang":"rust","kind":"method","name":"new_tiktoken","qualified_name":"ChunkingBackend::new_tiktoken","byte_start":1141,"byte_end":1525,"start_line":34,"end_line":41,"visibility":"public","doc":"Create backend with tiktoken for OpenAI compatibility"}
{"file":"diff.rs","lang":"rust","kind":"method","name":"count_tokens","qualified_name":"ChunkingBackend::count_tokens","byte_start":1573,"byte_end":1795,"start_line":44,"end_line":48,"visibility":"public","doc":"Count tokens in text efficiently"}
{"file":"diff.rs","lang":"rust","kind":"method","name":"chunk_with_overlap","qualified_name":"ChunkingBackend::chunk_with_overlap","byte_start":1857,"byte_end":3025,"start_line":51,"end_line":88,"visibility":"public","doc":"Split text into token-aware chunks with overlap"}
{"file":"diff.rs","lang":"rust","kind":"function","name":"chunk_by_symbols","qualified_name":"chunk_by_symbols","byte_start":3099,"byte_end":4785,"start_line":92,"end_line":137,"visibility":"public","doc":"Symbol-aware chunking strategy - prefer function/class boundaries"}
{"file":"diff.rs","lang":"rust","kind":"struct","name":"ChunkInfo","qualified_name":"ChunkInfo","byte_start":4850,"byte_end":5031,"start_line":141,"end_line":148,"visibility":"public","doc":null}
{"file":"diff.rs","lang":"rust","kind":"method","name":"new","qualified_name":"ChunkInfo::new","byte_start":5054,"byte_end":5408,"start_line":151,"end_line":166,"visibility":"public","doc":null}
{"file":"diff.rs","lang":"rust","kind":"method","name":"from_symbols","qualified_name":"ChunkInfo::from_symbols","byte_start":5418,"byte_end":6492,"start_line":168,"end_line":199,"visibility":"public","doc":null}
{"file":"diff.rs","lang":"rust","kind":"function","name":"extract_symbol_text","qualified_name":"extract_symbol_text","byte_start":6553,"byte_end":6981,"start_line":203,"end_line":214,"visibility":null,"doc":"Extract text for a specific symbol from file content"}
{"file":"src/cli.rs","lang":"rust","kind":"struct","name":"Cli","qualified_name":"Cli","byte_start":271,"byte_end":647,"start_line":10,"end_line":25,"visibility":"public","doc":null}
{"file":"src/cli.rs","lang":"rust","kind":"enum","name":"Commands","qualified_name":"Commands","byte_start":671,"byte_end":1122,"start_line":28,"end_line":46,"visibility":"public","doc":null}
{"file":"src/cli.rs","lang":"rust","kind":"struct","name":"ExtractArgs","qualified_name":"ExtractArgs","byte_start":1142,"byte_end":1725,"start_line":49,"end_line":72,"visibility":"public","doc":null}
{"file":"src/cli.rs","lang":"rust","kind":"struct","name":"TreeArgs","qualified_name":"TreeArgs","byte_start":1745,"byte_end":2131,"start_line":75,"end_line":91,"visibility":"public","doc":null}
{"file":"src/cli.rs","lang":"rust","kind":"struct","name":"SymbolsArgs","qualified_name":"SymbolsArgs","byte_start":2158,"byte_end":2593,"start_line":94,"end_line":110,"visibility":"public","doc":null}
{"file":"src/cli.rs","lang":"rust","kind":"struct","name":"ChunkArgs","qualified_name":"ChunkArgs","byte_start":2613,"byte_end":3301,"start_line":113,"end_line":136,"visibility":"public","doc":null}
{"file":"src/cli.rs","lang":"rust","kind":"struct","name":"InitArgs","qualified_name":"InitArgs","byte_start":3321,"byte_end":3519,"start_line":139,"end_line":147,"visibility":"public","doc":null}
{"file":"src/cli.rs","lang":"rust","kind":"enum","name":"Shell","qualified_name":"Shell","byte_start":3556,"byte_end":3631,"start_line":150,"end_line":156,"visibility":"public","doc":null}
{"file":"src/cli.rs","lang":"rust","kind":"struct","name":"CompletionsArgs","qualified_name":"CompletionsArgs","byte_start":3651,"byte_end":3971,"start_line":159,"end_line":171,"visibility":"public","doc":null}
{"file":"src/completion.rs","lang":"rust","kind":"method","name":"from","qualified_name":"CompletionShell::from","byte_start":303,"byte_end":636,"start_line":11,"end_line":19,"visibility":null,"doc":null}
{"file":"src/completion.rs","lang":"rust","kind":"function","name":"run","qualified_name":"run","byte_start":640,"byte_end":1304,"start_line":22,"end_line":42,"visibility":"public","doc":null}
{"file":"src/core/chunk.rs","lang":"rust","kind":"struct","name":"GptChunker","qualified_name":"GptChunker","byte_start":1343,"byte_end":1569,"start_line":40,"end_line":46,"visibility":"public","doc":"Chunker specialized for GPT models using `tiktoken_rs`."}
{"file":"src/core/chunk.rs","lang":"rust","kind":"method","name":"new","qualified_name":"GptChunker::new","byte_start":1711,"byte_end":3054,"start_line":51,"end_line":81,"visibility":"public","doc":"Build from a GPT model id (preferred) or a canonical\nencoding name. Non-GPT identifiers are rejected."}
{"file":"src/core/chunk.rs","lang":"rust","kind":"method","name":"count_tokens","qualified_name":"GptChunker::count_tokens","byte_start":3115,"byte_end":3279,"start_line":84,"end_line":87,"visibility":"public","doc":"Count tokens in `text` using the resolved BPE."}
{"file":"src/core/chunk.rs","lang":"rust","kind":"method","name":"chunk_with_overlap","qualified_name":"GptChunker::chunk_with_overlap","byte_start":3400,"byte_end":5257,"start_line":91,"end_line":151,"visibility":"public","doc":"Token-aware chunking with N-token overlap.\nGuarantees forward progress and clamps overlaps safely."}
{"file":"src/core/chunk.rs","lang":"rust","kind":"struct","name":"ChunkInfo","qualified_name":"ChunkInfo","byte_start":5334,"byte_end":5750,"start_line":156,"end_line":169,"visibility":"public","doc":null}
{"file":"src/core/chunk.rs","lang":"rust","kind":"function","name":"chunk_by_symbols","qualified_name":"chunk_by_symbols","byte_start":5917,"byte_end":8146,"start_line":174,"end_line":239,"visibility":"public","doc":"Prefer function/class boundaries; split oversize symbols\nwith token-based chunking. All symbols must be from the\nsame source file for coherent metadata."}
{"file":"src/core/chunk.rs","lang":"rust","kind":"method","name":"from_symbols","qualified_name":"ChunkInfo::from_symbols","byte_start":8344,"byte_end":10229,"start_line":245,"end_line":297,"visibility":"public","doc":"Build a chunk from a set of symbols by concatenating\ntheir byte-sliced text, preserving order and adding a\nsingle newline between consecutive symbols."}
{"file":"src/core/chunk.rs","lang":"rust","kind":"function","name":"extract_symbol_text","qualified_name":"extract_symbol_text","byte_start":10344,"byte_end":11262,"start_line":302,"end_line":335,"visibility":null,"doc":"Extract symbol text via byte ranges when possible.\nFalls back to line slicing if the range is invalid."}
{"file":"src/core/chunk.rs","lang":"rust","kind":"function","name":"run","qualified_name":"run","byte_start":11337,"byte_end":12969,"start_line":338,"end_line":383,"visibility":"public","doc":"CLI run function - integrates GptChunker with command-line interface"}
{"file":"src/core/chunk.rs","lang":"rust","kind":"function","name":"extract_symbols_for_chunking","qualified_name":"extract_symbols_for_chunking","byte_start":13027,"byte_end":13529,"start_line":386,"end_line":398,"visibility":null,"doc":"Extract symbols for chunking (simplified interface)"}
{"file":"src/core/chunk.rs","lang":"rust","kind":"function","name":"chunk_by_tokens","qualified_name":"chunk_by_tokens","byte_start":13565,"byte_end":14216,"start_line":401,"end_line":422,"visibility":null,"doc":"Token-based chunking fallback"}
{"file":"src/core/chunk.rs","lang":"rust","kind":"function","name":"write_chunks_and_manifest","qualified_name":"write_chunks_and_manifest","byte_start":14270,"byte_end":15436,"start_line":425,"end_line":456,"visibility":null,"doc":"Write chunks to files and create JSONL manifest"}
{"file":"src/core/extract/mod.rs","lang":"rust","kind":"module","name":"target","qualified_name":"target","byte_start":72,"byte_end":87,"start_line":3,"end_line":3,"visibility":"public","doc":null}
{"file":"src/core/extract/mod.rs","lang":"rust","kind":"function","name":"run","qualified_name":"run","byte_start":360,"byte_end":3484,"start_line":16,"end_line":115,"visibility":"public","doc":null}
{"file":"src/core/extract/mod.rs","lang":"rust","kind":"function","name":"format_extraction","qualified_name":"format_extraction","byte_start":3486,"byte_end":4955,"start_line":117,"end_line":174,"visibility":null,"doc":null}
{"file":"src/core/extract/mod.rs","lang":"rust","kind":"function","name":"copy_to_clipboard","qualified_name":"copy_to_clipboard","byte_start":4957,"byte_end":5279,"start_line":176,"end_line":187,"visibility":null,"doc":null}
{"file":"src/core/extract/mod.rs","lang":"rust","kind":"module","name":"tests","qualified_name":"tests","byte_start":5294,"byte_end":6476,"start_line":190,"end_line":224,"visibility":null,"doc":null}
{"file":"src/core/extract/mod.rs","lang":"rust","kind":"function","name":"test_parse_extraction_target","qualified_name":"crate::tests::test_parse_extraction_target","byte_start":5341,"byte_end":5612,"start_line":194,"end_line":198,"visibility":null,"doc":null}
{"file":"src/core/extract/mod.rs","lang":"rust","kind":"function","name":"test_parse_single_line","qualified_name":"crate::tests::test_parse_single_line","byte_start":5630,"byte_end":5785,"start_line":201,"end_line":204,"visibility":null,"doc":null}
{"file":"src/core/extract/mod.rs","lang":"rust","kind":"function","name":"test_parse_windows_path","qualified_name":"crate::tests::test_parse_windows_path","byte_start":5803,"byte_end":6075,"start_line":207,"end_line":211,"visibility":null,"doc":null}
{"file":"src/core/extract/mod.rs","lang":"rust","kind":"function","name":"test_parse_invalid_format","qualified_name":"crate::tests::test_parse_invalid_format","byte_start":6093,"byte_end":6266,"start_line":214,"end_line":217,"visibility":null,"doc":null}
{"file":"src/core/extract/mod.rs","lang":"rust","kind":"function","name":"test_adjacent_range_merge","qualified_name":"crate::tests::test_adjacent_range_merge","byte_start":6284,"byte_end":6474,"start_line":220,"end_line":223,"visibility":null,"doc":null}
{"file":"src/core/extract/target.rs","lang":"rust","kind":"struct","name":"ExtractionTarget","qualified_name":"ExtractionTarget","byte_start":211,"byte_end":414,"start_line":8,"end_line":13,"visibility":"public","doc":null}
{"file":"src/core/extract/target.rs","lang":"rust","kind":"method","name":"parse","qualified_name":"ExtractionTarget::parse","byte_start":539,"byte_end":3135,"start_line":18,"end_line":97,"visibility":"public","doc":"Parse a target string like\n\"src/main.rs:1-5,10-15\" or \"C:\\\\src\\\\lib.rs:20-25\"."}
{"file":"src/core/symbols.rs","lang":"rust","kind":"function","name":"run","qualified_name":"run","byte_start":707,"byte_end":2224,"start_line":20,"end_line":65,"visibility":"public","doc":"Public CLI entry point expected by the command layer"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"struct","name":"Symbol","qualified_name":"Symbol","byte_start":2333,"byte_end":3091,"start_line":69,"end_line":102,"visibility":"public","doc":null}
{"file":"src/core/symbols.rs","lang":"rust","kind":"enum","name":"SymbolKind","qualified_name":"SymbolKind","byte_start":3237,"byte_end":3812,"start_line":107,"end_line":146,"visibility":"public","doc":null}
{"file":"src/core/symbols.rs","lang":"rust","kind":"enum","name":"Visibility","qualified_name":"Visibility","byte_start":3946,"byte_end":4137,"start_line":151,"end_line":163,"visibility":"public","doc":null}
{"file":"src/core/symbols.rs","lang":"rust","kind":"struct","name":"LanguageSelector","qualified_name":"LanguageSelector","byte_start":4189,"byte_end":4354,"start_line":166,"end_line":172,"visibility":null,"doc":"Internal helper that selects target languages"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"method","name":"resolve","qualified_name":"LanguageSelector::resolve","byte_start":4436,"byte_end":4975,"start_line":176,"end_line":192,"visibility":null,"doc":"Construct from CLI args and config fallback"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"method","name":"contains","qualified_name":"LanguageSelector::contains","byte_start":5026,"byte_end":5104,"start_line":195,"end_line":197,"visibility":null,"doc":"Test if a language label is selected"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"method","name":"as_vec","qualified_name":"LanguageSelector::as_vec","byte_start":5156,"byte_end":5224,"start_line":200,"end_line":202,"visibility":null,"doc":"Expose ordered languages for messages"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"struct","name":"FileCollector","qualified_name":"FileCollector","byte_start":5281,"byte_end":5302,"start_line":206,"end_line":206,"visibility":null,"doc":"File collection based on Gitignore-aware walking"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"method","name":"collect","qualified_name":"FileCollector::collect","byte_start":5398,"byte_end":6054,"start_line":210,"end_line":231,"visibility":null,"doc":"Walk the tree and retain files that match selected languages"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"struct","name":"LanguageDetector","qualified_name":"LanguageDetector","byte_start":6103,"byte_end":6127,"start_line":235,"end_line":235,"visibility":null,"doc":"Simple extension-based language detector"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"method","name":"detect","qualified_name":"LanguageDetector::detect","byte_start":6214,"byte_end":6818,"start_line":239,"end_line":257,"visibility":null,"doc":"Map file extensions to canonical language labels"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"struct","name":"SymbolsExecutor","qualified_name":"SymbolsExecutor","byte_start":6865,"byte_end":6888,"start_line":261,"end_line":261,"visibility":null,"doc":"Parallel symbol extraction coordinator"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"method","name":"extract_parallel","qualified_name":"SymbolsExecutor::extract_parallel","byte_start":6968,"byte_end":7666,"start_line":265,"end_line":286,"visibility":null,"doc":"Extract symbols from all files using rayon"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"method","name":"extract_one","qualified_name":"SymbolsExecutor::extract_one","byte_start":7714,"byte_end":8591,"start_line":289,"end_line":313,"visibility":null,"doc":"Extract symbols for a single file"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"struct","name":"LineNumberMapper","qualified_name":"LineNumberMapper","byte_start":8644,"byte_end":8668,"start_line":317,"end_line":317,"visibility":null,"doc":"Map byte offsets to line numbers efficiently"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"method","name":"fill_lines","qualified_name":"LineNumberMapper::fill_lines","byte_start":8754,"byte_end":9924,"start_line":321,"end_line":352,"visibility":null,"doc":"Compute and assign line numbers for all symbols"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"struct","name":"LineIndex","qualified_name":"LineIndex","byte_start":9975,"byte_end":10124,"start_line":356,"end_line":361,"visibility":null,"doc":"Immutable index of line start byte offsets"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"method","name":"new","qualified_name":"LineIndex::new","byte_start":10191,"byte_end":10633,"start_line":365,"end_line":382,"visibility":null,"doc":"Build a line index by scanning once"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"method","name":"byte_span_to_lines","qualified_name":"LineIndex::byte_span_to_lines","byte_start":10693,"byte_end":11129,"start_line":385,"end_line":397,"visibility":null,"doc":"Convert a byte span into 1-based line numbers"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"method","name":"byte_to_line","qualified_name":"LineIndex::byte_to_line","byte_start":11197,"byte_end":11424,"start_line":400,"end_line":406,"visibility":null,"doc":"Convert a single byte offset to a 1-based line number"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"struct","name":"VisibilityFilter","qualified_name":"VisibilityFilter","byte_start":11480,"byte_end":11504,"start_line":410,"end_line":410,"visibility":null,"doc":"Filter utilities for visibility post-processing"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"method","name":"retain_public","qualified_name":"VisibilityFilter::retain_public","byte_start":11591,"byte_end":11779,"start_line":414,"end_line":417,"visibility":null,"doc":"Keep only symbols that are public or unspecified"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"struct","name":"JsonlWriter","qualified_name":"JsonlWriter","byte_start":11823,"byte_end":11842,"start_line":421,"end_line":421,"visibility":null,"doc":"Stream symbols to a JSON Lines file"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"method","name":"write","qualified_name":"JsonlWriter::write","byte_start":11925,"byte_end":12776,"start_line":425,"end_line":447,"visibility":null,"doc":"Write one JSON object per line into `output_path`"}
{"file":"src/core/symbols.rs","lang":"rust","kind":"function","name":"get_extractor","qualified_name":"get_extractor","byte_start":12809,"byte_end":13109,"start_line":451,"end_line":457,"visibility":"public","doc":null}
{"file":"src/core/symbols.rs","lang":"rust","kind":"trait","name":"SymbolExtractor","qualified_name":"SymbolExtractor","byte_start":13111,"byte_end":13277,"start_line":459,"end_line":465,"visibility":"public","doc":null}
{"file":"src/core/symbols.rs","lang":"rust","kind":"function","name":"build_qualified_name","qualified_name":"build_qualified_name","byte_start":13326,"byte_end":13404,"start_line":468,"end_line":470,"visibility":"public","doc":null}
{"file":"src/core/symbols.rs","lang":"rust","kind":"function","name":"parse_visibility","qualified_name":"parse_visibility","byte_start":13448,"byte_end":13721,"start_line":473,"end_line":480,"visibility":"public","doc":null}
{"file":"src/core/symbols.rs","lang":"rust","kind":"module","name":"tests","qualified_name":"tests","byte_start":13736,"byte_end":16266,"start_line":483,"end_line":571,"visibility":null,"doc":null}
{"file":"src/core/symbols.rs","lang":"rust","kind":"function","name":"language_detection_matrix","qualified_name":"crate::tests::language_detection_matrix","byte_start":13873,"byte_end":14541,"start_line":489,"end_line":510,"visibility":null,"doc":null}
{"file":"src/core/symbols.rs","lang":"rust","kind":"function","name":"line_index_maps_spans","qualified_name":"crate::tests::line_index_maps_spans","byte_start":14605,"byte_end":15056,"start_line":514,"end_line":529,"visibility":null,"doc":null}
{"file":"src/core/symbols.rs","lang":"rust","kind":"function","name":"jsonl_writer_emits_one_line_per_symbol","qualified_name":"crate::tests::jsonl_writer_emits_one_line_per_symbol","byte_start":15131,"byte_end":16264,"start_line":533,"end_line":570,"visibility":null,"doc":null}
{"file":"src/core/tree.rs","lang":"rust","kind":"constant","name":"MMAP_THRESHOLD_BYTES","qualified_name":"MMAP_THRESHOLD_BYTES","byte_start":619,"byte_end":663,"start_line":21,"end_line":21,"visibility":null,"doc":null}
{"file":"src/core/tree.rs","lang":"rust","kind":"function","name":"run","qualified_name":"run","byte_start":674,"byte_end":1433,"start_line":23,"end_line":47,"visibility":"public","doc":null}
{"file":"src/core/tree.rs","lang":"rust","kind":"struct","name":"TreeNode","qualified_name":"TreeNode","byte_start":1452,"byte_end":1714,"start_line":50,"end_line":59,"visibility":null,"doc":null}
{"file":"src/core/tree.rs","lang":"rust","kind":"method","name":"new","qualified_name":"TreeNode::new","byte_start":1736,"byte_end":1951,"start_line":62,"end_line":70,"visibility":null,"doc":null}
{"file":"src/core/tree.rs","lang":"rust","kind":"method","name":"insert_path","qualified_name":"TreeNode::insert_path","byte_start":2067,"byte_end":3636,"start_line":74,"end_line":125,"visibility":null,"doc":"Insert a path into the tree. If `file_lines` is Some(_),\nit is applied to the leaf file node."}
{"file":"src/core/tree.rs","lang":"rust","kind":"function","name":"build_tree_with_counts","qualified_name":"build_tree_with_counts","byte_start":3702,"byte_end":4948,"start_line":129,"end_line":167,"visibility":null,"doc":"Build the tree and attach line counts to file leaf nodes."}
{"file":"src/core/tree.rs","lang":"rust","kind":"function","name":"print_tree","qualified_name":"print_tree","byte_start":5017,"byte_end":5266,"start_line":170,"end_line":179,"visibility":null,"doc":"Print the tree with formatted labels. Files show `name:lines`."}
{"file":"src/core/tree.rs","lang":"rust","kind":"function","name":"add_children_to_builder","qualified_name":"add_children_to_builder","byte_start":5268,"byte_end":5691,"start_line":181,"end_line":191,"visibility":null,"doc":null}
{"file":"src/core/tree.rs","lang":"rust","kind":"function","name":"format_node_label","qualified_name":"format_node_label","byte_start":5762,"byte_end":6066,"start_line":194,"end_line":204,"visibility":null,"doc":"Format node label with colors and, for files, appended `:lines`."}
{"file":"src/core/tree.rs","lang":"rust","kind":"function","name":"color_by_ext","qualified_name":"color_by_ext","byte_start":6068,"byte_end":6763,"start_line":206,"end_line":224,"visibility":null,"doc":null}
{"file":"src/core/tree.rs","lang":"rust","kind":"function","name":"count_lines_fast","qualified_name":"count_lines_fast","byte_start":6893,"byte_end":7929,"start_line":228,"end_line":260,"visibility":null,"doc":"Fast, CRLF-safe total line counting.\nCounts '\\n' bytes and adds one if the file is non-empty and doesn't end with '\\n'."}
{"file":"src/core/tree.rs","lang":"rust","kind":"module","name":"tests","qualified_name":"tests","byte_start":7944,"byte_end":8902,"start_line":263,"end_line":293,"visibility":null,"doc":null}
{"file":"src/core/tree.rs","lang":"rust","kind":"function","name":"test_tree_building_and_counts","qualified_name":"crate::tests::test_tree_building_and_counts","byte_start":8035,"byte_end":8900,"start_line":269,"end_line":292,"visibility":null,"doc":null}
{"file":"src/infra/config.rs","lang":"rust","kind":"struct","name":"Config","qualified_name":"Config","byte_start":168,"byte_end":625,"start_line":7,"end_line":25,"visibility":"public","doc":null}
{"file":"src/infra/config.rs","lang":"rust","kind":"struct","name":"ExtractConfig","qualified_name":"ExtractConfig","byte_start":668,"byte_end":770,"start_line":28,"end_line":32,"visibility":"public","doc":null}
{"file":"src/infra/config.rs","lang":"rust","kind":"struct","name":"TreeConfig","qualified_name":"TreeConfig","byte_start":813,"byte_end":899,"start_line":35,"end_line":38,"visibility":"public","doc":null}
{"file":"src/infra/config.rs","lang":"rust","kind":"struct","name":"SymbolsConfig","qualified_name":"SymbolsConfig","byte_start":942,"byte_end":1062,"start_line":41,"end_line":45,"visibility":"public","doc":null}
{"file":"src/infra/config.rs","lang":"rust","kind":"struct","name":"ChunkConfig","qualified_name":"ChunkConfig","byte_start":1105,"byte_end":1209,"start_line":48,"end_line":52,"visibility":"public","doc":null}
{"file":"src/infra/config.rs","lang":"rust","kind":"method","name":"default","qualified_name":"Config::default","byte_start":1241,"byte_end":2534,"start_line":55,"end_line":93,"visibility":null,"doc":null}
{"file":"src/infra/config.rs","lang":"rust","kind":"function","name":"load_config","qualified_name":"load_config","byte_start":2538,"byte_end":3332,"start_line":96,"end_line":123,"visibility":"public","doc":null}
{"file":"src/infra/config.rs","lang":"rust","kind":"function","name":"init","qualified_name":"init","byte_start":3334,"byte_end":3941,"start_line":125,"end_line":143,"visibility":"public","doc":null}
{"file":"src/infra/io.rs","lang":"rust","kind":"constant","name":"MMAP_THRESHOLD","qualified_name":"MMAP_THRESHOLD","byte_start":91,"byte_end":131,"start_line":6,"end_line":6,"visibility":null,"doc":null}
{"file":"src/infra/io.rs","lang":"rust","kind":"enum","name":"FileContent","qualified_name":"FileContent","byte_start":142,"byte_end":206,"start_line":8,"end_line":11,"visibility":"public","doc":null}
{"file":"src/infra/io.rs","lang":"rust","kind":"method","name":"as_ref","qualified_name":"FileContent::as_ref","byte_start":246,"byte_end":617,"start_line":14,"end_line":23,"visibility":null,"doc":null}
{"file":"src/infra/io.rs","lang":"rust","kind":"function","name":"read_file_smart","qualified_name":"read_file_smart","byte_start":621,"byte_end":1531,"start_line":26,"end_line":48,"visibility":"public","doc":null}
{"file":"src/infra/io.rs","lang":"rust","kind":"function","name":"extract_lines","qualified_name":"extract_lines","byte_start":1650,"byte_end":3042,"start_line":52,"end_line":97,"visibility":"public","doc":"Extract inclusive 1-based line ranges as a single String.\nRanges must be validated and merged by the caller."}
{"file":"src/infra/io.rs","lang":"rust","kind":"function","name":"merge_overlapping_ranges","qualified_name":"merge_overlapping_ranges","byte_start":3044,"byte_end":3723,"start_line":99,"end_line":123,"visibility":"public","doc":null}
{"file":"src/infra/io.rs","lang":"rust","kind":"module","name":"tests","qualified_name":"tests","byte_start":3738,"byte_end":4601,"start_line":126,"end_line":157,"visibility":null,"doc":null}
{"file":"src/infra/io.rs","lang":"rust","kind":"function","name":"test_merge_overlapping_ranges","qualified_name":"crate::tests::test_merge_overlapping_ranges","byte_start":3785,"byte_end":4249,"start_line":130,"end_line":145,"visibility":null,"doc":null}
{"file":"src/infra/io.rs","lang":"rust","kind":"function","name":"test_extract_lines","qualified_name":"crate::tests::test_extract_lines","byte_start":4267,"byte_end":4599,"start_line":148,"end_line":156,"visibility":null,"doc":null}
{"file":"src/infra/line_index.rs","lang":"rust","kind":"struct","name":"NewlineIndex","qualified_name":"NewlineIndex","byte_start":529,"byte_end":695,"start_line":18,"end_line":23,"visibility":"public","doc":null}
{"file":"src/infra/line_index.rs","lang":"rust","kind":"method","name":"build","qualified_name":"NewlineIndex::build","byte_start":773,"byte_end":1214,"start_line":27,"end_line":42,"visibility":"public","doc":"Build an index recording positions of '\\n'."}
{"file":"src/infra/line_index.rs","lang":"rust","kind":"method","name":"line_count","qualified_name":"NewlineIndex::line_count","byte_start":1310,"byte_end":1459,"start_line":46,"end_line":52,"visibility":"public","doc":"Total number of logical lines.\nEmpty buffer => 0 lines; else (#'\\n' + 1)."}
{"file":"src/infra/line_index.rs","lang":"rust","kind":"method","name":"start_byte_of_line","qualified_name":"NewlineIndex::start_byte_of_line","byte_start":1561,"byte_end":1966,"start_line":56,"end_line":68,"visibility":"public","doc":"Start byte (inclusive) of a 1-based line.\nReturns None if line is out of range."}
{"file":"src/infra/line_index.rs","lang":"rust","kind":"method","name":"end_byte_of_line","qualified_name":"NewlineIndex::end_byte_of_line","byte_start":2120,"byte_end":2780,"start_line":73,"end_line":91,"visibility":"public","doc":"End byte (exclusive) of a 1-based line.\nReturns None if line is out of range.\nFor CRLF, excludes trailing '\\r' before '\\n'."}
{"file":"src/infra/line_index.rs","lang":"rust","kind":"method","name":"byte_range_for_lines","qualified_name":"NewlineIndex::byte_range_for_lines","byte_start":2915,"byte_end":3555,"start_line":95,"end_line":120,"visibility":"public","doc":"Byte range (start..end) for an inclusive 1-based line span.\nReturns None if the span is invalid or out of range."}
{"file":"src/infra/line_index.rs","lang":"rust","kind":"method","name":"line_of_byte","qualified_name":"NewlineIndex::line_of_byte","byte_start":3709,"byte_end":4148,"start_line":125,"end_line":136,"visibility":"public","doc":"1-based line number covering the given byte offset.\nOffsets at '\\n' belong to the *next* line.\nReturns 0 for empty buffers."}
{"file":"src/infra/utils.rs","lang":"rust","kind":"struct","name":"NameUtils","qualified_name":"NameUtils","byte_start":282,"byte_end":303,"start_line":10,"end_line":10,"visibility":"public","doc":"Qualified-name helpers"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"method","name":"join","qualified_name":"NameUtils::join","byte_start":389,"byte_end":828,"start_line":14,"end_line":29,"visibility":"public","doc":"Join name parts with the given separator into a String"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"struct","name":"Utf8Utils","qualified_name":"Utf8Utils","byte_start":863,"byte_end":884,"start_line":33,"end_line":33,"visibility":"public","doc":"UTF-8 safe slicing helpers"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"method","name":"slice_str","qualified_name":"Utf8Utils::slice_str","byte_start":1009,"byte_end":1294,"start_line":38,"end_line":46,"visibility":"public","doc":"Return a substring by byte range if it is on a char\nboundary within `full`, else None"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"method","name":"slice_node_text","qualified_name":"Utf8Utils::slice_node_text","byte_start":1431,"byte_end":1698,"start_line":51,"end_line":58,"visibility":"public","doc":"Convert a tree-sitter byte range to a &str slice,\nreturns None if boundaries are not valid char\nboundaries"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"struct","name":"TsNodeUtils","qualified_name":"TsNodeUtils","byte_start":1738,"byte_end":1761,"start_line":62,"end_line":62,"visibility":"public","doc":"Common Tree-sitter node helpers"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"method","name":"has_ancestor","qualified_name":"TsNodeUtils::has_ancestor","byte_start":1844,"byte_end":2152,"start_line":66,"end_line":78,"visibility":"public","doc":"Check if `node` has an ancestor of the given kind"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"method","name":"find_ancestor","qualified_name":"TsNodeUtils::find_ancestor","byte_start":2208,"byte_end":2549,"start_line":81,"end_line":93,"visibility":"public","doc":"Find the first ancestor of the given kind"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"method","name":"field_text","qualified_name":"TsNodeUtils::field_text","byte_start":2604,"byte_end":2859,"start_line":96,"end_line":102,"visibility":"public","doc":"Extract text of a child field if present"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"method","name":"line_range_1based","qualified_name":"TsNodeUtils::line_range_1based","byte_start":2920,"byte_end":3177,"start_line":105,"end_line":112,"visibility":"public","doc":"Convert node positions to 1-based line numbers"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"struct","name":"PyDocUtils","qualified_name":"PyDocUtils","byte_start":3210,"byte_end":3232,"start_line":116,"end_line":116,"visibility":"public","doc":"Python docstring helpers"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"method","name":"docstring_for","qualified_name":"PyDocUtils::docstring_for","byte_start":3434,"byte_end":4614,"start_line":122,"end_line":152,"visibility":"public","doc":"Extract a PEP 257 docstring from a function, class,\nor module node. This expects the caller to pass a\nnode whose first statement may be a string literal."}
{"file":"src/infra/utils.rs","lang":"rust","kind":"method","name":"unquote_and_dedent","qualified_name":"PyDocUtils::unquote_and_dedent","byte_start":4677,"byte_end":5727,"start_line":155,"end_line":187,"visibility":"public","doc":"Remove string prefixes, strip quotes, and dedent"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"method","name":"dedent","qualified_name":"PyDocUtils::dedent","byte_start":5783,"byte_end":6353,"start_line":190,"end_line":208,"visibility":"public","doc":"Minimal dedent across all non-empty lines"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"struct","name":"RustDocUtils","qualified_name":"RustDocUtils","byte_start":6400,"byte_end":6424,"start_line":212,"end_line":212,"visibility":"public","doc":"Rust doc attribute and comment helpers"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"method","name":"doc_attr_text","qualified_name":"RustDocUtils::doc_attr_text","byte_start":6612,"byte_end":7920,"start_line":218,"end_line":269,"visibility":"public","doc":"Extract text from a '#[doc = \"...\"]' attribute\nThis supports normal quoted strings. Raw strings\nare handled by `doc_attr_text_raw` below."}
{"file":"src/infra/utils.rs","lang":"rust","kind":"method","name":"doc_attr_text_raw","qualified_name":"RustDocUtils::doc_attr_text_raw","byte_start":8026,"byte_end":9352,"start_line":273,"end_line":323,"visibility":"public","doc":"Extract text from a '#[doc = r#\" ... \"#]' raw string\nSupports one or more # markers"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"method","name":"doc_comment_text","qualified_name":"RustDocUtils::doc_comment_text","byte_start":9480,"byte_end":10454,"start_line":327,"end_line":360,"visibility":"public","doc":"Extract from '///...' and '/** ... */' when they are\ndoc comments. Returns normalized text when detected."}
{"file":"src/infra/utils.rs","lang":"rust","kind":"struct","name":"VisibilityUtils","qualified_name":"VisibilityUtils","byte_start":10488,"byte_end":10515,"start_line":364,"end_line":364,"visibility":"public","doc":"Simple visibility helpers"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"method","name":"python_from_name","qualified_name":"VisibilityUtils::python_from_name","byte_start":10598,"byte_end":10729,"start_line":368,"end_line":371,"visibility":"public","doc":"Python private if name starts with underscore"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"method","name":"label_from_private","qualified_name":"VisibilityUtils::label_from_private","byte_start":10840,"byte_end":10994,"start_line":375,"end_line":378,"visibility":"public","doc":"Generic helper to map a bool private flag to\na string label for quick logs or JSON dumps"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"module","name":"tests","qualified_name":"tests","byte_start":11011,"byte_end":11306,"start_line":382,"end_line":392,"visibility":null,"doc":null}
{"file":"src/infra/utils.rs","lang":"rust","kind":"function","name":"parse_python","qualified_name":"parse_python","byte_start":11369,"byte_end":11751,"start_line":395,"end_line":408,"visibility":null,"doc":"Build a tiny Python tree to test docstring paths"}
{"file":"src/infra/utils.rs","lang":"rust","kind":"function","name":"name_join_works","qualified_name":"name_join_works","byte_start":11769,"byte_end":12001,"start_line":411,"end_line":420,"visibility":null,"doc":null}
{"file":"src/infra/utils.rs","lang":"rust","kind":"function","name":"utf8_slice_safe_boundaries","qualified_name":"utf8_slice_safe_boundaries","byte_start":12019,"byte_end":12380,"start_line":423,"end_line":436,"visibility":null,"doc":null}
{"file":"src/infra/utils.rs","lang":"rust","kind":"function","name":"pydoc_unquote_and_dedent_triple","qualified_name":"pydoc_unquote_and_dedent_triple","byte_start":12398,"byte_end":12745,"start_line":439,"end_line":452,"visibility":null,"doc":null}
{"file":"src/infra/utils.rs","lang":"rust","kind":"function","name":"pydoc_unquote_single","qualified_name":"pydoc_unquote_single","byte_start":12763,"byte_end":12999,"start_line":455,"end_line":464,"visibility":null,"doc":null}
{"file":"src/infra/utils.rs","lang":"rust","kind":"function","name":"rust_doc_attr_raw_basic","qualified_name":"rust_doc_attr_raw_basic","byte_start":13017,"byte_end":13749,"start_line":467,"end_line":486,"visibility":null,"doc":null}
{"file":"src/infra/utils.rs","lang":"rust","kind":"method","name":"doc_comment_text_fake","qualified_name":"RustDocUtils::doc_comment_text_fake","byte_start":13936,"byte_end":14867,"start_line":492,"end_line":521,"visibility":"public","doc":null}
{"file":"src/infra/utils.rs","lang":"rust","kind":"function","name":"tsnode_has_ancestor_smoke","qualified_name":"tsnode_has_ancestor_smoke","byte_start":14891,"byte_end":16116,"start_line":525,"end_line":573,"visibility":null,"doc":null}
{"file":"src/infra/utils.rs","lang":"rust","kind":"function","name":"dfs","qualified_name":"dfs","byte_start":15404,"byte_end":15869,"start_line":544,"end_line":563,"visibility":null,"doc":null}
{"file":"src/infra/walk.rs","lang":"rust","kind":"struct","name":"FileWalker","qualified_name":"FileWalker","byte_start":400,"byte_end":506,"start_line":12,"end_line":15,"visibility":"public","doc":"Gitignore-aware walker with optional extra ignore globs.\nExtra globs are applied in two places:\n1) Early: prune directories during traversal (filter_entry).\n2) Late: filter out files that still slipped through."}
{"file":"src/infra/walk.rs","lang":"rust","kind":"method","name":"new","qualified_name":"FileWalker::new","byte_start":681,"byte_end":1274,"start_line":20,"end_line":36,"visibility":"public","doc":"Build a walker with additional ignore patterns (e.g., \"target/**\",\n\"node_modules/**\", \"**/*.min.js\"). These are matched on full paths."}
{"file":"src/infra/walk.rs","lang":"rust","kind":"method","name":"walk_files","qualified_name":"FileWalker::walk_files","byte_start":1417,"byte_end":3662,"start_line":40,"end_line":95,"visibility":"public","doc":"Traverse files under `root`, respecting .gitignore and extra globs.\nReturns a sorted list of file paths for determinism."}
{"file":"src/infra/walk.rs","lang":"rust","kind":"method","name":"walk_with_filter","qualified_name":"FileWalker::walk_with_filter","byte_start":3812,"byte_end":4136,"start_line":100,"end_line":110,"visibility":"public","doc":null}
{"file":"src/infra/walk.rs","lang":"rust","kind":"module","name":"tests","qualified_name":"tests","byte_start":4153,"byte_end":8917,"start_line":114,"end_line":265,"visibility":null,"doc":null}
{"file":"src/infra/walk.rs","lang":"rust","kind":"function","name":"write_file","qualified_name":"crate::tests::write_file","byte_start":4281,"byte_end":4667,"start_line":120,"end_line":134,"visibility":null,"doc":"Create a file with parent dirs as needed"}
{"file":"src/infra/walk.rs","lang":"rust","kind":"function","name":"test_file_walking_simple","qualified_name":"crate::tests::test_file_walking_simple","byte_start":4685,"byte_end":5561,"start_line":137,"end_line":162,"visibility":null,"doc":null}
{"file":"src/infra/walk.rs","lang":"rust","kind":"function","name":"test_respects_gitignore","qualified_name":"crate::tests::test_respects_gitignore","byte_start":5579,"byte_end":7049,"start_line":165,"end_line":205,"visibility":null,"doc":null}
{"file":"src/infra/walk.rs","lang":"rust","kind":"function","name":"test_additional_globs_prune_and_filter","qualified_name":"crate::tests::test_additional_globs_prune_and_filter","byte_start":7067,"byte_end":8062,"start_line":208,"end_line":237,"visibility":null,"doc":null}
{"file":"src/infra/walk.rs","lang":"rust","kind":"function","name":"test_hidden_files_included_unless_ignored","qualified_name":"crate::tests::test_hidden_files_included_unless_ignored","byte_start":8080,"byte_end":8915,"start_line":240,"end_line":264,"visibility":null,"doc":null}
{"file":"src/lib.rs","lang":"rust","kind":"module","name":"cli","qualified_name":"cli","byte_start":312,"byte_end":324,"start_line":7,"end_line":7,"visibility":"public","doc":"Command-line interface with clap integration"}
{"file":"src/lib.rs","lang":"rust","kind":"module","name":"completion","qualified_name":"completion","byte_start":358,"byte_end":377,"start_line":10,"end_line":10,"visibility":"public","doc":"Shell completion generation"}
{"file":"src/lib.rs","lang":"rust","kind":"module","name":"core","qualified_name":"core","byte_start":471,"byte_end":1071,"start_line":13,"end_line":29,"visibility":"public","doc":"Core processing pipeline - High-performance extraction and analysis (2,847 lines total)"}
{"file":"src/lib.rs","lang":"rust","kind":"module","name":"extract","qualified_name":"crate::core::extract","byte_start":564,"byte_end":580,"start_line":15,"end_line":15,"visibility":"public","doc":"Line-range extraction with gitignore awareness and memory mapping"}
{"file":"src/lib.rs","lang":"rust","kind":"module","name":"symbols","qualified_name":"crate::core::symbols","byte_start":706,"byte_end":722,"start_line":19,"end_line":19,"visibility":"public","doc":"Tree-sitter symbol extraction pipeline (Rust+Python locked, 572 lines)"}
{"file":"src/lib.rs","lang":"rust","kind":"module","name":"tree","qualified_name":"crate::core::tree","byte_start":883,"byte_end":896,"start_line":23,"end_line":23,"visibility":"public","doc":"Directory tree visualization with depth control and parallel processing"}
{"file":"src/lib.rs","lang":"rust","kind":"module","name":"chunk","qualified_name":"crate::core::chunk","byte_start":1018,"byte_end":1032,"start_line":27,"end_line":27,"visibility":"public","doc":"Token-aware content chunking for LLM workflows with tiktoken integration"}
{"file":"src/lib.rs","lang":"rust","kind":"module","name":"parsers","qualified_name":"parsers","byte_start":1151,"byte_end":1578,"start_line":32,"end_line":43,"visibility":"public","doc":"Language processing - AST parsing and symbol extraction with moka caching"}
{"file":"src/lib.rs","lang":"rust","kind":"module","name":"rust_parser","qualified_name":"crate::parsers::rust_parser","byte_start":1251,"byte_end":1271,"start_line":34,"end_line":34,"visibility":"public","doc":"Rust symbol extraction with tree-sitter (qualified names, visibility)"}
{"file":"src/lib.rs","lang":"rust","kind":"module","name":"python_parser","qualified_name":"crate::parsers::python_parser","byte_start":1397,"byte_end":1419,"start_line":38,"end_line":38,"visibility":"public","doc":"Python symbol extraction with tree-sitter (classes, functions, methods)"}
{"file":"src/lib.rs","lang":"rust","kind":"module","name":"infra","qualified_name":"infra","byte_start":1655,"byte_end":2299,"start_line":46,"end_line":66,"visibility":"public","doc":"Infrastructure - Configuration, I/O, and utilities (lean architecture)"}
{"file":"src/lib.rs","lang":"rust","kind":"module","name":"config","qualified_name":"crate::infra::config","byte_start":1744,"byte_end":1759,"start_line":48,"end_line":48,"visibility":"public","doc":"Configuration management with TOML support and feature flags"}
{"file":"src/lib.rs","lang":"rust","kind":"module","name":"io","qualified_name":"crate::infra::io","byte_start":1893,"byte_end":1904,"start_line":52,"end_line":52,"visibility":"public","doc":"Memory-mapped file I/O for large files (>1MB threshold)"}
{"file":"src/lib.rs","lang":"rust","kind":"module","name":"line_index","qualified_name":"crate::infra::line_index","byte_start":2024,"byte_end":2043,"start_line":56,"end_line":56,"visibility":"public","doc":"CRLF/LF-robust line indexing for O(1) line→byte mapping"}
{"file":"src/lib.rs","lang":"rust","kind":"module","name":"walk","qualified_name":"crate::infra::walk","byte_start":2152,"byte_end":2165,"start_line":60,"end_line":60,"visibility":"public","doc":"Gitignore-aware directory walking with rayon parallelism"}
{"file":"src/lib.rs","lang":"rust","kind":"module","name":"utils","qualified_name":"crate::infra::utils","byte_start":2261,"byte_end":2275,"start_line":64,"end_line":64,"visibility":"public","doc":"Utility functions and helpers for common operations"}
{"file":"src/main.rs","lang":"rust","kind":"function","name":"main","qualified_name":"main","byte_start":74,"byte_end":560,"start_line":5,"end_line":16,"visibility":null,"doc":null}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"struct","name":"PythonExtractor","qualified_name":"PythonExtractor","byte_start":1313,"byte_end":1492,"start_line":29,"end_line":34,"visibility":"public","doc":"Extracts Python symbols (functions, classes, methods)."}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"method","name":"new","qualified_name":"PythonExtractor::new","byte_start":1638,"byte_end":2286,"start_line":39,"end_line":57,"visibility":"public","doc":"Construct a new extractor with a broad query that\ncaptures function_definition and class_definition."}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"method","name":"extract_symbols","qualified_name":"PythonExtractor::extract_symbols","byte_start":2460,"byte_end":6591,"start_line":63,"end_line":172,"visibility":null,"doc":"Parse `content`, run the query, derive symbol data, and\nreturn a flat list of symbols defined in the file."}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"function","name":"python_qualified_name_method","qualified_name":"python_qualified_name_method","byte_start":6695,"byte_end":7357,"start_line":177,"end_line":195,"visibility":null,"doc":"Build qualified method names of the form\n`Outer::Inner::method`, climbing ancestor classes."}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"function","name":"python_docstring_extract","qualified_name":"python_docstring_extract","byte_start":7562,"byte_end":9547,"start_line":201,"end_line":255,"visibility":null,"doc":"Extract a PEP 257 docstring from a function/class:\nfirst statement in the body must be a string literal.\nSupports single/triple quotes, r/u/f prefixes, and\nconcatenated string sequences."}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"function","name":"unquote_python_string","qualified_name":"unquote_python_string","byte_start":9661,"byte_end":10866,"start_line":259,"end_line":296,"visibility":null,"doc":"Strip Python string prefixes/quotes and perform a light\nunescape plus dedent for triple-quoted strings."}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"function","name":"leading_alpha_len","qualified_name":"leading_alpha_len","byte_start":10971,"byte_end":11186,"start_line":300,"end_line":310,"visibility":null,"doc":"Return the count of leading ASCII alphabetic chars.\nUsed to slice off string literal prefixes."}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"function","name":"dedent_and_unescape","qualified_name":"dedent_and_unescape","byte_start":11300,"byte_end":12395,"start_line":314,"end_line":353,"visibility":null,"doc":"Dedent triple-quoted content and unescape if not raw.\nAlso strips a single leading/trailing blank line."}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"function","name":"basic_unescape","qualified_name":"basic_unescape","byte_start":12510,"byte_end":13356,"start_line":357,"end_line":386,"visibility":null,"doc":"Minimal unescape for common sequences when not raw.\nIntended for docstrings, not general Python parsing."}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"function","name":"has_ancestor","qualified_name":"has_ancestor","byte_start":13419,"byte_end":13613,"start_line":389,"end_line":397,"visibility":null,"doc":"Return true if `node` has an ancestor of the given kind."}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"module","name":"tests","qualified_name":"tests","byte_start":13628,"byte_end":16738,"start_line":400,"end_line":509,"visibility":null,"doc":null}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"function","name":"has","qualified_name":"crate::tests::has","byte_start":13803,"byte_end":13914,"start_line":407,"end_line":409,"visibility":null,"doc":"Helper: predicate for kind+name match."}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"function","name":"get","qualified_name":"crate::tests::get","byte_start":13972,"byte_end":14164,"start_line":412,"end_line":416,"visibility":null,"doc":"Helper: fetch a single symbol by kind+name."}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"function","name":"python_functions_public_private_and_docstring","qualified_name":"crate::tests::python_functions_public_private_and_docstring","byte_start":14182,"byte_end":14895,"start_line":419,"end_line":440,"visibility":null,"doc":null}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"function","name":"python_class_and_methods_with_qualified_names","qualified_name":"crate::tests::python_class_and_methods_with_qualified_names","byte_start":14913,"byte_end":15814,"start_line":443,"end_line":473,"visibility":null,"doc":null}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"function","name":"python_nested_classes_qualified_names","qualified_name":"crate::tests::python_nested_classes_qualified_names","byte_start":15832,"byte_end":16331,"start_line":476,"end_line":492,"visibility":null,"doc":null}
{"file":"src/parsers/python_parser.rs","lang":"rust","kind":"function","name":"python_non_first_string_is_not_docstring","qualified_name":"crate::tests::python_non_first_string_is_not_docstring","byte_start":16349,"byte_end":16736,"start_line":495,"end_line":508,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"struct","name":"RustExtractor","qualified_name":"RustExtractor","byte_start":305,"byte_end":469,"start_line":11,"end_line":15,"visibility":"public","doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"method","name":"new","qualified_name":"RustExtractor::new","byte_start":496,"byte_end":1493,"start_line":18,"end_line":45,"visibility":"public","doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"method","name":"extract_symbols","qualified_name":"RustExtractor::extract_symbols","byte_start":1542,"byte_end":4186,"start_line":49,"end_line":132,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"function","name":"build_symbol","qualified_name":"build_symbol","byte_start":4190,"byte_end":5426,"start_line":135,"end_line":175,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"function","name":"has_ancestor","qualified_name":"has_ancestor","byte_start":5428,"byte_end":5622,"start_line":177,"end_line":185,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"function","name":"first_named_child_text","qualified_name":"first_named_child_text","byte_start":5624,"byte_end":5929,"start_line":187,"end_line":195,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"function","name":"name_of","qualified_name":"name_of","byte_start":5931,"byte_end":6237,"start_line":197,"end_line":203,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"function","name":"visibility_of","qualified_name":"visibility_of","byte_start":6239,"byte_end":6554,"start_line":205,"end_line":215,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"function","name":"owner_of_method","qualified_name":"owner_of_method","byte_start":6556,"byte_end":7842,"start_line":217,"end_line":251,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"function","name":"enclosing_module_path","qualified_name":"enclosing_module_path","byte_start":7844,"byte_end":8457,"start_line":253,"end_line":273,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"function","name":"gather_leading_rust_docs","qualified_name":"gather_leading_rust_docs","byte_start":8459,"byte_end":9601,"start_line":275,"end_line":309,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"module","name":"tests","qualified_name":"tests","byte_start":9616,"byte_end":13937,"start_line":312,"end_line":459,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"function","name":"has","qualified_name":"crate::tests::has","byte_start":9732,"byte_end":9843,"start_line":318,"end_line":320,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"function","name":"get","qualified_name":"crate::tests::get","byte_start":9849,"byte_end":10041,"start_line":322,"end_line":326,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"function","name":"rust_functions_and_docs","qualified_name":"crate::tests::rust_functions_and_docs","byte_start":10059,"byte_end":10782,"start_line":329,"end_line":350,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"function","name":"rust_struct_and_docs","qualified_name":"crate::tests::rust_struct_and_docs","byte_start":10800,"byte_end":11205,"start_line":353,"end_line":367,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"function","name":"symbol_kinds_covered","qualified_name":"crate::tests::symbol_kinds_covered","byte_start":11223,"byte_end":12066,"start_line":370,"end_line":391,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"function","name":"impl_methods_and_qualification_variants","qualified_name":"crate::tests::impl_methods_and_qualification_variants","byte_start":12084,"byte_end":13028,"start_line":394,"end_line":427,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"function","name":"trait_default_methods","qualified_name":"crate::tests::trait_default_methods","byte_start":13046,"byte_end":13522,"start_line":430,"end_line":445,"visibility":null,"doc":null}
{"file":"src/parsers/rust_parser.rs","lang":"rust","kind":"function","name":"nested_modules_qualification","qualified_name":"crate::tests::nested_modules_qualification","byte_start":13540,"byte_end":13935,"start_line":448,"end_line":458,"visibility":null,"doc":null}
{"file":"tests/line_index_tests.rs","lang":"rust","kind":"function","name":"empty_buffer_has_zero_lines","qualified_name":"empty_buffer_has_zero_lines","byte_start":108,"byte_end":347,"start_line":6,"end_line":12,"visibility":null,"doc":null}
{"file":"tests/line_index_tests.rs","lang":"rust","kind":"function","name":"single_line_no_newline","qualified_name":"single_line_no_newline","byte_start":357,"byte_end":749,"start_line":15,"end_line":24,"visibility":null,"doc":null}
{"file":"tests/line_index_tests.rs","lang":"rust","kind":"function","name":"lf_three_lines_with_trailing_nl","qualified_name":"lf_three_lines_with_trailing_nl","byte_start":759,"byte_end":1534,"start_line":27,"end_line":47,"visibility":null,"doc":null}
{"file":"tests/line_index_tests.rs","lang":"rust","kind":"function","name":"crlf_three_lines_without_final_nl","qualified_name":"crlf_three_lines_without_final_nl","byte_start":1544,"byte_end":2573,"start_line":50,"end_line":76,"visibility":null,"doc":null}
{"file":"tests/line_index_tests.rs","lang":"rust","kind":"function","name":"out_of_range_requests_return_none","qualified_name":"out_of_range_requests_return_none","byte_start":2583,"byte_end":3057,"start_line":79,"end_line":89,"visibility":null,"doc":null}
